<style lang="less">
  .plan {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    .swiper {
      width: 100%;
      height: 100%;
      text-align: center;
      swiper-item {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 60rpx;
        box-sizing: border-box;
      }
    }
  }
  .new-btn{
    position: fixed;
    bottom: 20rpx;
    right: 20rpx;
    width: 200rpx;
    height: 80rpx;
    text-align: center;
    line-height: 80rpx;
    background-color: #138cff;
    color: #fff;
    font-size: 25rpx;
    border-radius: 40rpx;
  }
  .new-plan{
    position: absolute;
    width: 100%;
    height: 100%;
  }
</style>
<template>
  <view class="plan">
    <swiper class="swiper" current="{{swiperIndex}}">
      <repeat for="{{ planList }}" key="index" index="index" item="item">
        <swiper-item>
          <planCard 
            :id="item._id"
            :type="item.type"
            :title="item.title"
            :remark="item.remark"
            :createtime="item.create_time"
            :minutes="item.minutes"
            :times="item.times">
          </planCard>
        </swiper-item>
      </repeat>
    </swiper>
    <button class="new-btn" @tap="onNew">
      新计划
    </button>
    <newPlan 
    wx:if="{{showFlag}}" 
    class="new-plan"
    :planType="planType">
      <view slot="modalSlot">
        新计划
      </view>
    </newPlan>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import planCard from '../components/planCard'
  import modal from '../components/modal'
  import { formatTime } from '../utils/util'
  const db = wx.cloud.database()
  export default class Plan extends wepy.page {
    config = {
      navigationBarTitleText: '计划'
    }
    components = {
      planCard,
      newPlan: modal
    }

    data = {
      planList: [],
      planType: [
        '学习',
        '运动',
        '娱乐'
      ],
      showFlag: false,
      swiperIndex: 0
    }

    computed = {}

    methods = {
      onNew() {
        this.changeShow()
      }
    }

    async getPlanList(){
      try {
        let res = await db.collection('plans').where({
          _openid: this.$parent.globalData.openid
        }).get()
        if(res.data){
          this.planList = res.data
          this.$apply()
        } else{
          console.log(res)
          wx.showToast({
            title: "res error",
            icon: 'none',
            duration: 1500
          })
        }
      } catch (error) {
        console.log(error)
        wx.showToast({
          title: 'catch error',
          icon: 'none',
          duration: 1500
        })
      }
    }

    changeShow(){
      this.showFlag = !this.showFlag
      this.$apply()
    }
    
    toLastSwiper() {
      this.swiperIndex = this.planList.length - 1
      this.$apply()
    }
    events = {
      closeModal() {
        this.changeShow()
      },
      async addPlan(plan) {
        try {
          let res = await db.collection('plans').add({
          data: {
            create_time: formatTime(new Date()),
            type: plan.planType,
            title: plan.planTitle,
            remark: plan.planRemark,
            minutes: 0,
            times: 0,
            }
          })
          if(res._id) {
            wx.showToast({
              title: '添加成功',
              icon: 'success',
              duration: 2000
            })
            await this.getPlanList()
            this.changeShow()
            this.toLastSwiper()
          }
        } catch (error) {
          wx.showToast({
            title: '添加失败',
            icon: 'none',
            duration: 2000
          })
        }
      },
      async delPlan(id) {
        try {
          let res = await db.collection('plans').doc(id).remove()
          if(res){
            wx.showToast({
              title: '删除成功',
              icon: 'success',
              duration: 2000
            })
            await this.getPlanList()
            this.toLastSwiper()
          }
        } catch (error) {
          wx.showToast({
            title: '删除失败' + error,
            icon: 'none',
            duration: 2000
          })
        }
      }
    }

    onLoad() {
    }

    async onShow() {
      await this.getPlanList()
    }
  }
</script>
